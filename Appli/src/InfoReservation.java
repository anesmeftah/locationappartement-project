/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
import java.security.DrbgParameters.Reseed;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import java.text.SimpleDateFormat;
import java.util.Date;
/**
 *
 * @author motaz
 */
public class InfoReservation extends javax.swing.JPanel {

    /**
     * Creates new form InfoReservation
     */
    private int ID;
    private String formatDate(Date d){
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

        return(formatter.format(d));
        
    }
    private void update(){
    try{
                String host = "jdbc:mysql://127.0.0.1:3306/locationappartement";
                String uName = "root";
                String uPass = "root";

                Connection con = DriverManager.getConnection(host, uName, uPass);
                Statement stmt = con.createStatement();
                Statement stmt2 = con.createStatement();
                Statement stmt3 = con.createStatement();
                
                String SQL = "SELECT * FROM RESERVATION WHERE ID ="+ID;
                ResultSet rs = stmt.executeQuery(SQL);
                
                while(rs.next()){
                    IdL.setText(rs.getString("ID"));
                    int clientID = rs.getInt("ID_CLIENT");
                    int appID = rs.getInt("ID_APPARTEMENT");
                    String SQL2 = "SELECT * FROM CLIENTS WHERE ID = "+clientID;
                    ResultSet rs2 = stmt2.executeQuery(SQL2);
                    rs2.next();
                    String SQL3 = "SELECT * FROM APPARTEMENT WHERE ID ="+appID;
                    ResultSet rs3 = stmt3.executeQuery(SQL3);
                    rs3.next();
                    AdressL.setText(rs3.getString("ADDRESS"));
                    RfL.setText(formatDate(rs.getDate("DATEDEBUT")));
                    RuL.setText(formatDate(rs.getDate("DATEFIN")));
                    System.out.println(rs.getString("STATUT"));
                    StatusL.setText(rs.getString("STATUT"));
                    
                    /*PbL.setText(rs.getDate("PAYBEFORE")); */

                    ClienUsernameL.setText(rs2.getString("EMAIL"));
                    rs2.close();stmt2.close();
                    rs3.close();stmt3.close();
                
                    

                }
                rs.close();stmt.close();
        }catch(SQLException err){
                System.out.println(err.getMessage());
            }
    }
    public InfoReservation() {
        initComponents();
    }
    
    public InfoReservation(int id) {
        initComponents();
        this.ID = id;
        update();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        Properties p = new Properties();

        // Create model1
        UtilDateModel model1 = new UtilDateModel();
        JDatePanelImpl datePanel1 = new JDatePanelImpl(model1, p);
        datePicker1 = new JDatePickerImpl(datePanel1, new DateLabelFormatter());

        // Create model2
        UtilDateModel model2 = new UtilDateModel();
        JDatePanelImpl datePanel2 = new JDatePanelImpl(model2, p);
        datePicker2 = new JDatePickerImpl(datePanel2, new DateLabelFormatter());

        // Create model3
        UtilDateModel model3 = new UtilDateModel();
        JDatePanelImpl datePanel3 = new JDatePanelImpl(model3, p);
        datePicker3 = new JDatePickerImpl(datePanel3, new DateLabelFormatter());

        jLabel1 = new javax.swing.JLabel();
        IdL = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AdressL = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        RfL = new javax.swing.JLabel();
        RfP = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        RfB = new javax.swing.JButton();
        RuL = new javax.swing.JLabel();
        RuP = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        RuB = new javax.swing.JButton();
        PbL = new javax.swing.JLabel();
        PbP = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        PbB = new javax.swing.JButton();
        ClienUsernameL = new javax.swing.JLabel();
        statusCB = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        StatusL = new javax.swing.JLabel();
        statusB = new javax.swing.JButton();

        jLabel1.setText("ID : ");

        IdL.setText("id");

        jLabel4.setText("Client Username : ");

        ClienUsernameL.setText("ClienUsername");

        jLabel5.setText("ADMIN");

        jLabel7.setText("Address : ");

        AdressL.setText("Adress");

        jLabel2.setText("Reserved from : ");

        RfB.setText("Change");
        RfB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    ChangerRfB(evt);
                } catch (RentryException e) {
                    
                }
                
            }
        });

        RfL.setText("datefrom");

        javax.swing.GroupLayout RfPLayout = new javax.swing.GroupLayout(RfP);
        RfP.setLayout(RfPLayout);
        RfPLayout.setHorizontalGroup(
    RfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(RfPLayout.createSequentialGroup()
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(RfL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(RfB)
        .addContainerGap())
);
RfPLayout.setVerticalGroup(
    RfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(RfPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(RfPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel2)
            .addComponent(RfL)
            .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(RfB))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);


        jLabel9.setText("Reserved till : ");

        RuB.setText("Change");
        RuB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                try {
                    ChangerRuB(evt);
                } catch (RentryException e) {
                    
                }
            }
        });

        RuL.setText("dateuntil");

        javax.swing.GroupLayout RuPLayout = new javax.swing.GroupLayout(RuP);
        RuP.setLayout(RuPLayout);
        RuPLayout.setHorizontalGroup(
    RuPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(RuPLayout.createSequentialGroup()
        .addComponent(jLabel9)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(RuL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(RuB)
        .addContainerGap())
);
RuPLayout.setVerticalGroup(
    RuPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(RuPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(RuPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel9)
            .addComponent(RuL)
            .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(RuB))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);


        jLabel11.setText("Paying Limit :");

        PbB.setText("Change");
        PbB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                try {
                    ChangerPbB(evt);
                } catch (RentryException e) {
                    
                }
            }
        });

        PbL.setText("datelimit");

        javax.swing.GroupLayout PbPLayout = new javax.swing.GroupLayout(PbP);
        PbP.setLayout(PbPLayout);
        PbPLayout.setHorizontalGroup(
    PbPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(PbPLayout.createSequentialGroup()
        .addComponent(jLabel11)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(PbL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(datePicker3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(PbB)
        .addContainerGap())
);
PbPLayout.setVerticalGroup(
    PbPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(PbPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PbPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel11)
            .addComponent(PbL)
            .addComponent(datePicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(PbB))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);


        statusCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accepted", "Pending", "Declined" }));
        statusCB.setSelectedIndex(1);
        statusCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                try {
                    statusCBActionPerformed(evt);
                } catch (RentryException e) {
                    
                }
            }
        });

        jLabel8.setText("Status :");

        StatusL.setText("status");

        statusB.setText("Change");
        statusB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                try {
                    ChangerstatusB(evt);
                } catch (RentryException e) {
                    
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(45, 45, 45)
                        .addComponent(StatusL, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(statusCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusB))
                    .addComponent(PbP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AdressL, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClienUsernameL, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IdL, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(RuP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RfP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IdL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ClienUsernameL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AdressL)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RfP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RuP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PbP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(statusB)
                    .addComponent(StatusL)
                    .addComponent(statusCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ChangerRfB(java.awt.event.ActionEvent evt) throws RentryException {//GEN-FIRST:event_ChangerRfB
        if(datePicker1.getModel().getValue()==null){
            throw(new RentryException("You are an admin bruh",-1,true));
        }
        Date unproccessedDate = (Date) datePicker1.getModel().getValue();
        java.sql.Date selectedDate = new java.sql.Date(unproccessedDate.getTime());
        
        try{
                
                String host = "jdbc:mysql://127.0.0.1:3306/locationappartement";
                String uName = "root";
                String uPass = "root";

                Connection con = DriverManager.getConnection(host, uName, uPass);
                
                String sql = "UPDATE RESERVATION SET DATEDEBUT = ? WHERE ID = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);

                // Set the new email and the id of the client you want to update
                pstmt.setInt(2, ID);
                pstmt.setDate(1, selectedDate); 

                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Updated rows: " + rowsAffected);

                pstmt.close();
                con.close();
                
                
                
                
                
            }catch(SQLException err){
                System.out.println(err.getMessage());
            }
            this.update();

    }//GEN-LAST:event_ChangerRfB

    private void ChangerRuB(java.awt.event.ActionEvent evt) throws RentryException {//GEN-FIRST:event_ChangerRuB
        if(datePicker2.getModel().getValue()==null){
            throw(new RentryException("You are an admin bruh",-1,true));
        }
        Date unproccessedDate = (Date) datePicker2.getModel().getValue();
        java.sql.Date selectedDate = new java.sql.Date(unproccessedDate.getTime());
        try{
                
                String host = "jdbc:mysql://127.0.0.1:3306/locationappartement";
                String uName = "root";
                String uPass = "root";

                Connection con = DriverManager.getConnection(host, uName, uPass);
                
                String sql = "UPDATE RESERVATION SET DATEFIN = ? WHERE ID = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);

                // Set the new email and the id of the client you want to update
                pstmt.setInt(2, ID);
                pstmt.setDate(1, selectedDate); 

                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Updated rows: " + rowsAffected);

                pstmt.close();
                con.close();
                
                
                
                
                
            }catch(SQLException err){
                System.out.println(err.getMessage());
            }
            this.update();
    }//GEN-LAST:event_ChangerRuB

    private void ChangerPbB(java.awt.event.ActionEvent evt) throws RentryException {//GEN-FIRST:event_ChangerPbB
        /*if(datePicker3.getModel().getValue()==null){
            throw(new RentryException("You are an admin bruh",-1,true));
        }
        Date unproccessedDate = (Date) datePicker3.getModel().getValue();
        java.sql.Date selectedDate = new java.sql.Date(unproccessedDate.getTime());
        try{
                
                String host = "jdbc:mysql://127.0.0.1:3306/locationappartement";
                String uName = "root";
                String uPass = "root";

                Connection con = DriverManager.getConnection(host, uName, uPass);
                
                String sql = "UPDATE RESERVATION SET DATEDEBUT = ? WHERE ID = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);

                // Set the new email and the id of the client you want to update
                pstmt.setInt(2, ID);
                pstmt.setDate(1, selectedDate); 

                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Updated rows: " + rowsAffected);

                pstmt.close();
                con.close();
                
                
                
                
                
            }catch(SQLException err){
                System.out.println(err.getMessage());
            }
            this.update();*/
    }//GEN-LAST:event_ChangerPbB

    private void ChangerstatusB(java.awt.event.ActionEvent evt) throws RentryException {//GEN-FIRST:event_ChangerstatusB
        
        
        try{
                Object selected = statusCB.getSelectedItem();
                String choice = selected.toString();
                String host = "jdbc:mysql://127.0.0.1:3306/locationappartement";
                String uName = "root";
                String uPass = "root";

                Connection con = DriverManager.getConnection(host, uName, uPass);
                
                String sql = "UPDATE RESERVATION SET STATUT = ? WHERE ID = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);

                // Set the new email and the id of the client you want to update
                pstmt.setInt(2, ID);
                pstmt.setString(1, choice); 

                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Updated rows: " + rowsAffected);

                pstmt.close();
                con.close();
                
                
                
                
                
            }catch(SQLException err){
                System.out.println(err.getMessage());
            }
            this.update();
    }//GEN-LAST:event_ChangerstatusB

    private void statusCBActionPerformed(java.awt.event.ActionEvent evt) throws RentryException {//GEN-FIRST:event_statusCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IdL;
    private javax.swing.JLabel AdressL;
    private javax.swing.JButton PbB;
    private javax.swing.JPanel PbP;
    private javax.swing.JButton RfB;
    private javax.swing.JPanel RfP;
    private javax.swing.JButton RuB;
    private javax.swing.JPanel RuP;
    private javax.swing.JLabel ClienUsernameL;
    private javax.swing.JLabel RfL;
    private javax.swing.JLabel RuL;
    private javax.swing.JLabel PbL;
    private javax.swing.JLabel StatusL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton statusB;
    private javax.swing.JComboBox<String> statusCB;
    private JDatePickerImpl datePicker1;
    private JDatePickerImpl datePicker2;
    private JDatePickerImpl datePicker3;
    // End of variables declaration//GEN-END:variables
}
